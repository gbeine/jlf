#!/usr/bin/env python
"""
Get forward looking metrics from JIRA
"""

from jlf_stats.main import Main
from jlf_stats.metrics import Metrics
from jlf_stats import publisher

import json
from datetime import datetime, timedelta
import argparse
import logging
import sys
from jlf_stats.exceptions import MissingState, MissingConfigItem


def main():

    logging.basicConfig(level=logging.DEBUG)

    parser = argparse.ArgumentParser(description='Get forward looking metrics from JIRA')

    parser.add_argument('-n',
                        action="store",
                        dest="num_weeks",
                        type=int,
                        default=6)

    parser.add_argument('-c',
                        action="store",
                        dest="config_filename",
                        default='config.json')

    args = parser.parse_args()

    config_file = open(args.config_filename)
    config = json.load(config_file)

    end_date = datetime.now()
    start_date = end_date - timedelta(weeks=args.num_weeks)

    if 'until_date' not in config:
        config['until_date'] = datetime.strftime(end_date, '%Y-%m-%d')

    if 'initial_state' not in config:
        config['initial_state'] = u'Open'

    if 'reverse_history' not in config or config['reverse_history'] != 'False':
        config['reverse_history'] = 1
    else:
        config['reverse_history'] = 0

    main = Main(config)

    metrics = Metrics(config, main.jira_wrapper)
    metrics.save_work_items()

    try:
        publisher.publish(config,
                          metrics,
                          from_date=start_date.date(),
                          to_date=end_date.date())
    except MissingState as error:
        sys.exit(error.msg)
    except MissingConfigItem as error:
        sys.exit("Missing config parameter:{0}".format(error))

if __name__ == "__main__":
    main()
